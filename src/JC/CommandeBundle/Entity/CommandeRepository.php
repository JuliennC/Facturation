<?php

namespace JC\CommandeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends EntityRepository
{
	

	public function findCommandePourCollectiviteAvecStatutPourAnnee($collectivite, $statut, $annee){
		
		return $this
			->getEntityManager()
		    ->getRepository('JCCommandeBundle:CommandeConcerneCollectivite')
			
			->createQueryBuilder('ccc')
			
			->leftJoin('ccc.commande','com')
			->addSelect('com')
			
			->leftJoin('com.etats', 'passeEtat')
			->addSelect('passeEtat')
			
			->leftJoin('passeEtat.etat', 'et')
			->addSelect('et')
			
			->leftJoin('com.application', 'app')
			->addSelect('app')
			
			->leftJoin('com.activite', 'act')
			->addSelect('act')
			
			->leftJoin('act.cleRepartition', 'cle')
			->addSelect('cle')
			
			->where('ccc.collectivite = :collectivite AND et.libelle = :statut AND year(passeEtat.datePassage) = :annee')
			->setParameter('collectivite',$collectivite)
			->setParameter('statut',$statut)
			->setParameter('annee',$annee)
	
			->getQuery()	
			->getResult();

	}





	public function findCommandeAvecActiviteEtCollectivite($activite, $collectivite){
		
		return $this
			->getEntityManager()
		    ->getRepository('JCCommandeBundle:CommandeConcerneCollectivite')
			
			->createQueryBuilder('ccc')
			
			->leftJoin('ccc.commande','com')
			->addSelect('com')
			
			
			
			->where('ccc.collectivite = :collectivite AND com.activite = :activite')
			->setParameter('collectivite',$collectivite)
			->setParameter('activite',$activite)

	
			->getQuery()	
			->getResult();

	}



	//Retourne les 15 commandes à partir de la page :page
	public function find15CommandesAPartirDe($page){
		
		$qb = $this->createQueryBuilder('c');
						
		$qb	->orderBy('c.id','DESC')
			->setFirstResult(3*($page-1))
			->setMaxResults(3);
			
		$pag = new Paginator($qb, $fetchJoinCollection = true);
		return $pag->getQuery()->getResult();
		
		

	}






	//Retourne les 15 dcommandes d'un service avec :page
	public function find15CommandesAPartirDePourService($page, $service){
		
		$qb = $this->createQueryBuilder('c');
						
		$qb	->leftJoin("c.service","s")
			->where("s.nom = :service")
			->setParameter("service", $service)
			->orderBy('c.id','DESC')
			->setFirstResult(3*($page-1))
			->setMaxResults(3);
			
		$pag = new Paginator($qb, $fetchJoinCollection = true);
		return $pag->getQuery()->getResult();
		
	}
	
	
	
	
	public function find15CommandesAPartirDeAvecContrainte($contrainte, $valeur){
		
		$qb = $this->createQueryBuilder('c');
	
		if($contrainte === "Numéro de commande"){
			
			$qb	
			->where("c.id = :valeur")
			->setParameter("valeur", $valeur)
			;
		
		
		
		} else if($contrainte === "Utilisateur"){
			
			$qb	
			->where("c.utilisateur LIKE :valeur")
			->setParameter("valeur", "%".$valeur."%")
			;



		} else if($contrainte === "Service"){
			
			$qb	
			->leftJoin('c.service','s')
			->where("s.nom LIKE :valeur")
			->setParameter("valeur", "%".$valeur."%")
			;
		
		
		
		} else if($contrainte === "Référence"){
			
			$qb	
			->where("c.reference LIKE :valeur")
			->setParameter("valeur", "%".$valeur."%")
			;
		
		
		
		} else if($contrainte === "Nom Fournisseur"){
			
			$qb	
			->where("c.nomFournisseur LIKE :valeur")
			->setParameter("valeur", "%".$valeur."%")
			;
		}	
		
			
			
			
		$qb ->orderBy('c.id','DESC');

		
		
		return $qb->getQuery()->getResult();
	}

	
}
