TODO liste :



	
	-> FAIT : Enlever les référence à 'Projet'
	-> FAIT les bouton « envoyer » , « Annuler »
	-> FAIT un bonbon « modifier » si la commande n’est pas envoyé
	-> FAIT un bonbon « modifier » sur la liste des commandes
	-> FAIT Intégrer la gestion des lignes de commande
	-> FAIT Faire un trie pour la table des commandes
	-> FAIT le total automatique dans les lignes commandes
	-> FAIT Gérer la TVA
	-> FAIT un bouton pour sélectionner les fournisseurs et livraison
	-> FAIT Changer le "no results found" de la recherche des tables (mettre en francais)
	-> FAIT les commande direct (voir pour faire une collection dans le form, plus simple peut être)
	-> FAIT Terminer la création d'une commande
	-> FAIT Gérer les services avec leur budget par année
	-> FAIT faire une table état (et ainsi éviter que de mauvais paramêtre au changement d’état ne se glisse
	-> FAIT en supprimant la table année
	-> FAIT gérer les années (pour commande, informations collectivite, etc)
	-> FAIT ajouter le cout de la masse salarial
	-> FAIT une méthode qui calcule le cout d'une commande pour une collectivite donée
	-> FAIT afficher la date d’envoie et de paiement dans « detail » quand une commande est envoyée ou payée
	-> FAIT la table imputation.
	-> FAIT le calcul de la facturations en fonction des factures en investissement ou en fonctionnement
	-> FAIT Après l’installation de l’extensions doctrine, voir si les commande passe état fonctionne toujours comme il se doit (on a rajouté le year())
	-> FAIT Sur la page admin, une fois un form validé, lorsqu’on F5, le form est re-envoyé. En mettant une redirection après le form->isValid() une erreur 302 car on redirige à partir du contrôleur d’un block et non pas de la page, voir comment faire


	-> Dans imputation, faire un attribut ‘estFacturé’ (booléen) qui indique si les commandes de cette imputation doivent être facturé (oui -> facture, non -> facture coriolis)

	-> lors de la facturation, lancer une erreur lorsqu’une clé de rep n’est pas entrée pour une collectivité, voir pour faire une redirection

	-> faire comme des flèches a cote des années pour changer d’année au lieu de modifier dans l’url

	-> Demander a Severine si les imputations peuvent changer (fonctionnement/investissement) d’une année à l’autre. Si oui, voir les infos à garder « en dur » dans la commande. Sinon, laisse comme ca.


	-> Vérifier dans validator qu’une commande qui passe envoyé à bien n° coriolis etc
		(voir avec Severine) + Savoir à quel stade de la commande le num coriolis 		doit être entré, etc

	-> demander si une activité peut changer de clé en cours d’année, si oui, garder comme ça, sinon, prendre directement l’activite de la commande. ATTENTION, si on garde comme ça, ça veut dire que si on veut changer de clé pour X raison, les commandes antérieures ne seront pas affectées.
	
	-> Pour le bundle admin, faire des form pour chaque chose à modifier (devrait être plus simple que les autre forms, contient surtout des relation et du texte)


	


A LA FIN : 

	-> revoir les commentaires
	-> revoir les noms des variables
	-> revoir les type des attributs


TESTS : 

	-> tester les passage de paramètre avec de fausses valeurs pour s’assurer qu’on renvoie vers des pages d’erreur partout et faire avec ID (pour éviter les pb d’encodage)

	-> Faire différents tests avec des commandes sur plusieurs années



DETAILS :

	-> formatter le total d’une commande dans form.html.twig
	-> revoir la fonction de trie dans les tableau (js)
	-> Faire le form recherche en haut
